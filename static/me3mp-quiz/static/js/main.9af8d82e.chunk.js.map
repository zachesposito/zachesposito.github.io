{"version":3,"sources":["logo.svg","QuizQuestionButton.js","QuizQuestion.js","QuizEnd.js","Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuizQuestionButton","props","QuizQuestion","shuffledQuestions","shuffleArray","question","choices","state","submittedAnswerId","choiceId","this","incrementScoreHandler","setState","answer","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","choice","id","_showNextQuestionHandler","showNextQuestionHandler","rest","instructions","className","map","index","getChoiceButtonClass","onClick","submitAnswer","label","explanation","React","PureComponent","QuizEnd","quizResults","finalScore","title","description","resetQuiz","href","quizData","require","QuizContainer","styled","div","Container","Quiz","quizPosition","score","isQuizEnd","questions","src","bind","key","showNextQuestion","incrementScore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9af8d82e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst QuizQuestionButton = props => <li><button {...props} /></li>;\r\n\r\nQuizQuestionButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default QuizQuestionButton;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport QuizQuestionButton from './QuizQuestionButton';\r\n\r\nclass QuizQuestion extends React.PureComponent {\r\n  static propTypes = {\r\n    question: PropTypes.shape({\r\n      instructions: PropTypes.string,\r\n      choices: PropTypes.arrayOf(PropTypes.string),\r\n      answer: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        label: PropTypes.string\r\n      })\r\n    }).isRequired,\r\n    showNextQuestionHandler: PropTypes.func.isRequired,\r\n    incrementScoreHandler: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.shuffledQuestions = this.shuffleArray(props.question.choices);\r\n\r\n    this.state = { \r\n      submittedAnswerId: 0\r\n    };\r\n  }\r\n  submitAnswer(choiceId) {\r\n    const { \r\n      question,\r\n      incrementScoreHandler,\r\n    } = this.props;\r\n    this.setState({ submittedAnswerId: choiceId });\r\n    if (choiceId === question.answer) {\r\n      incrementScoreHandler();      \r\n    }\r\n  }\r\n\r\n  shuffleArray(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n  \r\n  getChoiceButtonClass(choice){\r\n    const { \r\n      question\r\n    } = this.props;\r\n    if (this.state.submittedAnswerId) {\r\n      if (choice.id === question.answer) {\r\n        return \"correctAnswer\";\r\n      }\r\n      if (choice.id === this.state.submittedAnswerId) {\r\n        return \"wrongAnswer\";\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      question,\r\n      showNextQuestionHandler: _showNextQuestionHandler,\r\n      ...rest\r\n    } = this.props;\r\n    return (\r\n      <main {...rest}>\r\n        <section>\r\n          <h3>{question.instructions}</h3>\r\n        </section>\r\n        <section className=\"answer-buttons\">\r\n          <ul>{this.shuffledQuestions.map((choice, index) => {\r\n            return <QuizQuestionButton \r\n              className={this.getChoiceButtonClass(choice)}\r\n              onClick={() => this.state.submittedAnswerId ? null : this.submitAnswer(choice.id)} >{choice.label}</QuizQuestionButton>\r\n          })}\r\n          </ul>\r\n        </section>\r\n        {this.state.submittedAnswerId ? \r\n          <>\r\n          <p className='explanation'>{question.explanation}</p> \r\n          <button className=\"advance-button\" onClick={() => _showNextQuestionHandler()}>Next question</button>\r\n          </>\r\n          : null}\r\n      </main>                \r\n    )\r\n  }\r\n}\r\n\r\nexport default QuizQuestion","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport quizResults from './quizResults.json';\r\n\r\nconst QuizEnd = props => (\r\n  <div>\r\n    <p>Your rank:</p>\r\n    <h2>{quizResults[props.finalScore].title}</h2>\r\n    <p>{quizResults[props.finalScore].description}</p>\r\n    <button onClick={props.resetQuiz} href=''>Reset Quiz</button>\r\n  </div>                \r\n)\r\n\r\nQuizEnd.propTypes = {\r\n  resetQuiz: PropTypes.func.isRequired\r\n};\r\n\r\nexport default QuizEnd;","import React from 'react';\r\nimport QuizQuestion from './QuizQuestion';\r\nimport QuizEnd from './QuizEnd';\r\nimport styled from 'styled-components';\r\n\r\nlet quizData = require('./quizData.json');\r\n\r\nconst QuizContainer = styled.div`\r\n  padding: 1em;\r\n  width:500px;\r\n  display:inline-block;\r\n  vertical-align:top;\r\n`;\r\nconst Container = styled.div`\r\n  width:1000px;\r\n  margin:auto;\r\n`;\r\n\r\nclass Quiz extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      quizPosition: 1,\r\n      score: 0\r\n    };\r\n  }\r\n  showNextQuestion() {\r\n    this.setState((state) => {\r\n      return {quizPosition: state.quizPosition + 1};\r\n    })\r\n  }\r\n  resetQuiz() {\r\n    this.setState({ \r\n      quizPosition: 1,\r\n      score: 0\r\n    });\r\n  }\r\n  incrementScore() {\r\n    this.setState((state) => {\r\n      return { score: state.score + 1 };\r\n    });\r\n  }\r\n  render() {\r\n    const isQuizEnd = (this.state.quizPosition - 1) === quizData.questions.length;\r\n    return (\r\n      <Container>\r\n        <h1>What's Your Special Ops Rank?</h1>\r\n        <h2>Test your Mass Effect 3 multiplayer knowledge</h2>\r\n        <img src=\"/salarian.png\"></img>\r\n        <QuizContainer>\r\n          {isQuizEnd ?\r\n            <QuizEnd resetQuiz={this.resetQuiz.bind(this)} finalScore={this.state.score} /> :\r\n            <>\r\n            <h3>Question {this.state.quizPosition} of {quizData.questions.length}</h3>\r\n            <QuizQuestion \r\n              key={this.state.quizPosition}\r\n              question={quizData.questions[this.state.quizPosition - 1]} \r\n              showNextQuestionHandler={this.showNextQuestion.bind(this)} \r\n              incrementScoreHandler={this.incrementScore.bind(this)}\r\n            />\r\n            </>\r\n          }\r\n        </QuizContainer>\r\n        <img src=\"/geth.png\"></img>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Quiz from './Quiz';\r\n\r\nfunction App() {\r\n  return (\r\n    <Quiz />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}